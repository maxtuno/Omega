[[[[[

A OMEGA expression that asserts that it itself is unprovable!

Let g(x): x -> (is-unprovable (value-of (('x)('x))))
;(define (g) (' (lambda (x) ((' (lambda (L) (L is-unprovable (L value-of (L (L ' x) (L ' x)))))) (' (lambda (x y) (cons x (cons y nil))))))))
(define (g) (' (lambda (x) ((' (lambda (L) (L is-unprovable (L value-of (L (L ' x) (L ' x)))))) (' (lambda (x y) (cons x (cons y nil))))))))

Then (is-unprovable (value-of (('g)('g))))
asserts that it itself is not a theorem!

]]]]]

define (g x) 
   let (L x y) cons x cons y nil [Makes x and y into list.]
   (L is-unprovable (L value-of (L (L "' x) (L "' x))))

[Here we try g:]

;(g x)
(g x)

[Here we calculate the OMEGA expression that asserts its own unprovability:]

;(g g)
(g g)

[Here we extract the part that it uses to name itself:]

;(car (cdr (car (cdr (g g)))))
(car (cdr (car (cdr  (g g)))))

[Here we evaluate the name to get back the entire expression:] 

;(eval (car (cdr (car (cdr  (g g))))))
(eval (car (cdr (car (cdr  (g g))))))

[Here we check that it worked:]

;(= (g g) (eval (car (cdr (car (cdr  (g g)))))))
(= (g g) (eval (car (cdr (car (cdr  (g g)))))))

